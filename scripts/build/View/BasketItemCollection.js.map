{"version":3,"sources":["scripts/dev/View/BasketItemCollection.js"],"names":[],"mappings":"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","file":"scripts/dev/View/BasketItemCollection.js","sourcesContent":["import Backbone from 'libs/backbone'\nimport BasketItemView from './BasketItem'\nimport BasketItemCollectionModel from 'Model/BasketItemCollection'\nimport productCollection from 'Model/ProductCollection'\nimport _ from 'underscore'\n\nclass BasketItemCollection extends Backbone.View {\n    //noinspection JSMethodCanBeStatic\n    tagName() {\n        return 'ul';\n    }\n\n    initialize(options) {\n        this.basket = options.basket;\n\n        this.collection = new BasketItemCollectionModel([], options);\n        this.newBasketItem = new this.collection.model({\n            basket: this.basket.id,\n            product: productCollection.firstId()\n        }, options);\n\n        this.listenTo(this.collection, 'reset', this.onCollectionReset);\n        this.listenTo(this.collection, 'add', this.onAdd);\n        this.listenTo(this.collection, 'destroy', this.onDelete);\n        this.listenTo(this.collection, 'sync', this.onCollectionSync);\n        this.listenTo(this.newBasketItem, 'save-item', this.onSaveItem);\n\n        this.collection.fetch({reset: true});\n    }\n\n    onDelete() {\n        this.basket.fetch();\n    }\n\n    onCollectionSync() {\n        this.basket.fetch();\n    }\n\n    onSaveItem(basketItem) {\n        let existed = this.collection.findWhere({basket: basketItem.get('basket'), product: basketItem.get('product')});\n\n        if (existed) {\n            existed.set('itemsAmount', existed.get('itemsAmount') + 1);\n        } else {\n            var basketItemData = _.clone(basketItem.attributes);\n            basketItemData.product = basketItemData.product || productCollection.firstId();\n\n            existed = this.collection.add(basketItemData);\n        }\n\n        existed.save();\n    }\n\n    onAdd(basketItem) {\n        this.renderItem(basketItem);\n    }\n\n    onCollectionReset(collection) {\n        this.$el.empty();\n        this.render(collection);\n    }\n\n    render(collection) {\n        this.renderItem(this.newBasketItem);\n\n        for(let basketItem of collection.models) {\n            this.renderItem(basketItem);\n        }\n    }\n\n    renderItem(basketItem) {\n        this.$el.append((new BasketItemView({model: basketItem})).$el);\n    }\n}\n\nexport default BasketItemCollection;"]}